{
  "name" : "Lakeshore 340",
  "connection" : "tcp",
  "host": "ets3",
  "port": 3006,
  "timeout": 5000, 
  "commandTerminator" : "\r\n",
  "responseTerminator" : "\r\n",
  "commandParameterSeperator" : " ",
  "parameterSeperator" : ",",

  "commandMap": {
    	"getDateTime":{
		"command" : "DATETIME?",
		"description" : "Returns date and time information in java.util.date",
		"responseFormat" : "(date)"
	},
	"setDateTime":{
		"command" : "DATETIME (date)",
		"description" : "Configures date and time using 24 hour format."
	},
	"getTempK":{
		"command" : "KRDG? (input)",
		"description" : "Returns the kelvin reading of the single input sensor",
		"responseFormat" : "(kelvin)"
	},
	"setAlarm" : {
	  "command" : "ALARM (input),(onoff),(source),(high),(low),(latch),(relay)",
	  "description"  : "Configure input alarm parameters"
	},
	"getAlarmConfig" : {
	  "command" : "ALARM? (input)",
	  "description"  : "Query input alarm parameters",
	  "responseFormat" : "(onoff),(source),(high),(low),(latch),(relay)"  
	},
	"setAnalog" : {
	  "command": "ANALOG (output),(bipolar),(mode),(input),(source),(high),(low),(manual)",
	  "description": "Configure analog output parameters"
	},
	"getAnalogConfig": {
	  "command": "ANALOG? (output)",
	  "description": "Query analog output parameters",
	  "responseFormat": "(bipolar),(mode),(input),(source),(high),(low),(manual)"
	},
	"getLogStat": {
	  "command": "LOG?",
	  "description" : "Query logging status",
	  "responseFormat" : "(onoff)"
	},
	"setLog": {
	  "command": "LOG (onoff)",
	  "description" : "Configure logging status"
	},
	"getAlarmStat": {
	  "command": "ALARMST? (input)",
	  "description" : "Query input sensor's  alarm status",
	  "responseFormat" : "(high status),(low status)"
	},
	"SoftCalGen": {
	  "command" : "SCAL (std),(dest),(serialNum),(tempPT),(sensorPT),(tempPT),(sensorPT),(tempPT),(sensorPT)",
          "description" : "Generates a SoftCal curve. NOTE: Curves are not permanently updated in the curve flash until a CRVSAV command is issued. May take some time, use the BUSY? command to determine completion."
	},
	"CurveSave":{
	  "command" : "CRVSAV",
	  "description" : "Updates the Curve Flash with the current user curves. May take several seconds; use the BUSY? command to determine when complete."
	},
	"getBusyStat":{
	  "command" : "BUSY?",
	  "description" : "Indicates that the instrument is busy performing a lengthy operation like generating a SoftCal curve, writing to the Flash chip, etc. Commands that use the Instrumetn Busy Status say so in their description.",
	  "outStringLength" : 1,
	  "responseFormat" : "(busy)"
	}
  },
  "paramMap": {
    "date":{
	"name" = "date",
	"type" = "date",
	"dataFormat" = "(\\d{2},\\d{2},\\d{4},\\d{2},\\d{2},\\d{2},\\d{3})",
	"paramFormat" = "%tm,%td,%ty,%tk,%tM,%tS,%tL",
	"dateFormat" = "MM,dd,yyyy,HH,mm,ss,SSS",
	"description" = "Date/Time parameter. Will be an object in java.util.date with format of MM,dd,yy,HH,mm,ss"
    },
    "input": {
      	"name": "input",
      	"type": "string",
      	"range": "A,B,C1,C2,C3,C4,D1,D2,D3,D4",
      	"dataFormat" = "([AB]|[CD][1-4])",
		"paramFormat" = "%s",
      	"description": "Indicates which input sensor to use."
    },
    "output": {
      "name": "output",
      "type": "int",
      "range": "[1,2]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Indicate which analog output to use."
    },
    "onoff": {
      "name": "onoff",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Indicates whether an item is turned off or turned on. 0 is off and 1 is on."
    },
    "source" : {
      "name": "source",
      "type": "int",
      "range": "[1,4]",
      "dataFormat" = "([1-4])",
      "paramFormat" = "%1d",
      "description": "Specifies input data to check. 1 = Kelvin, 2 = Celsius, 3 = Sensor units, 4 = linear data."
    },
    "high" : {
      "name": "high",
      "type": "double",
      "dataFormat" : "([\+\-]\\d*.\\d*E[\+\-]\\d*)",
      "paramFormat" : "(%+11E)",
      "description": "<ALARM>/<ALARM?>:The value the source is checked against to activate high alarm.\r\n\t<ANALOG>/<ANALOG?>:If mode = 1, this parameter represents the data at which the analog output reaches +100% output."
    },
    "low" : {
      "name": "low",
      "type": "double",
      "dataFormat" : "([\+\-]\\d*.\\d*E[\+\-]\\d*)",
      "paramFormat" : "(%+11E)",
      "description": "<ALARM>/<ALARM?>:The value the source is checked against to activate low alarm.\r\n\t<ANALOG>/<ANALOG?>:If mode = 1, this parameter represents the data at which the analog output reaches -100% output if bipolar, or 0% output if positive only."
    },
    "manual" : {
      "name": "manual",
      "type": "double",
      "dataFormat" : "([+-]\\d*.\\d*E[+-]\\d*|[+-]\\d*.\\d*)",
      "paramFormat" : "(%+11E)",
      "description": "If mode = 2, this parameter is the output of the analog output."
    },
    "latch" : {
      "name": "latch",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Specifies a latched alarm (remains active after alarm condition correction)."
    },
    "relay" : {
      "name": "relay",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Specifies a latched alarm (remains active after alarm condition correction)."
    },
    "bipolar": {
      "name": "bipolar",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Analog Output 0 = positive only, or 1 = bipolar."
    },
    "mode": {
      "name": "mode",
      "type": "int",
      "range": "[0,3]",
      "dataFormat" = "([0-3])",
      "paramFormat" = "%1d",
      "description": "Data the analog output monitors: 0 = off, 1 = input, 2 = manual, 3 = loop. Loop is valid only if output = 2."
    },
    "kelvin" : {
      "name" : "kelvin",
      "type" : "double",
      "dataFormat" : "([\+\-]\\d*.\\d*E[\+\-]\\d*)",
      "paramFormat" : "(%+11E)",
      "description" : "Kelvin reading of Temperature"
    },
    "high status": {
      "name": "high status",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Represent on/off status of high alarm. 0 is off and 1 is on."
    },
    "low status": {
      "name": "low status",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description": "Represent on/off status of low alarm. 0 is off and 1 is on."
    },    
    "std" : {
      "name" : "std",
      "type" : "int",
      "range" : "[1,20]",
      "dataFormat" = "([1-20])",
      "paramFormat" = "%2d",
      "description" : "Specifies the standard curve to generate a Softcal from."
    },
    "dest" : {
      "name" : "dest",
      "type" : "int",
      "range" : "[21,60]",
      "dataFormat" = "([21-60])",
      "paramFormat" = "%2d",
      "description" : "Specifies the user curve to store the Softcal curve."
    },
    "serialNum" : {
      "name" : "serialNum",
      "type" : "string",
      "length" : 10,
      "dataFormat" = "(\\S{1,10})",
      "paramFormat" = "%10s",
      "description" : "Specifies the curve serial number. Limited to 10 characters"
    },
    "tempPt" : {
      "name" : "tempPt",
      "type" : "double",
      "dataFormat" : "([[\+\-]\\d*.\\d*E[\+\-]\\d*|[\+\-]\\d*.\\d]",
      "paramFormat" : "(%+11E)",
      "description" : "Specifies the temperature point."
    },
    "sensorPt" : {
      "name" : "sensorPt",
      "type" : "double",
      "description" : "Specifies the sensor units point."
    },
    "busy" : {
      "name" : "busy",
      "type": "int",
      "range": "[0,1]",
      "dataFormat" = "([01])",
      "paramFormat" = "%1d",
      "description" : "0 = disable, 1 = enable" 
    }
  }
}
